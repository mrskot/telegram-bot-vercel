import logging
from lib.telegram import TelegramService
from lib.bitrix import BitrixService
from lib.supabase_client import supabase_client
from utils.formatters import format_data_for_edit, format_data_for_display

def handle_callback_query(callback_query):
    try:
        chat_id = callback_query['message']['chat']['id']
        callback_data = callback_query['data']
        username = callback_query['from'].get('username', 'unknown')
        
        logging.info(f"üîÑ Handling callback: {callback_data}")
        
        if callback_data.startswith('verify_ok_'):
            session_id = callback_data.replace('verify_ok_', '')
            handle_verification_ok(chat_id, session_id, username)
            
        elif callback_data.startswith('verify_edit_'):
            session_id = callback_data.replace('verify_edit_', '')
            handle_verification_edit(chat_id, session_id)
            
        elif callback_data.startswith('edit_field_'):
            parts = callback_data.split('_')
            session_id = parts[2]
            field_name = '_'.join(parts[3:])
            handle_edit_field(chat_id, session_id, field_name)
            
        elif callback_data.startswith('edit_done_'):
            session_id = callback_data.replace('edit_done_', '')
            handle_edit_done(chat_id, session_id)
            
        elif callback_data.startswith('edit_ok_'):
            session_id = callback_data.replace('edit_ok_', '')
            handle_edit_ok(chat_id, session_id, username)
            
    except Exception as e:
        logging.error(f"‚ùå Error handling callback: {e}")

def handle_verification_ok(chat_id, session_id, username):
    session = supabase_client.get_session(session_id)
    if not session:
        TelegramService().send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    bitrix_service = BitrixService()
    
    item_id = bitrix_service.send_data(
        session['parsed_data'], 
        chat_id, 
        username
    )
    
    bitrix_id = bitrix_service.extract_bitrix_id(item_id)
    
    final_data = format_final_data(session['parsed_data'])
    
    telegram = TelegramService()
    if bitrix_id:
        message = f"‚úÖ –°—É–ø–µ—Ä! –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, ID –∑–∞—è–≤–∫–∏: {bitrix_id}\n\n{final_data}"
    else:
        message = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24\n\n{final_data}"
    
    telegram.send_message(chat_id, message)
    logging.info(f"üì§ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {session['parsed_data']}")
    
    supabase_client.delete_session(session_id)

def handle_verification_edit(chat_id, session_id):
    session = supabase_client.get_session(session_id)
    if not session:
        TelegramService().send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    telegram = TelegramService()
    telegram.send_message(
        chat_id, 
        format_data_for_edit(session['parsed_data']), 
        telegram.create_edit_buttons(session_id)
    )
    
    supabase_client.update_session(session_id, {'status': 'editing'})

def handle_edit_field(chat_id, session_id, field_name):
    session = supabase_client.get_session(session_id)
    if not session:
        TelegramService().send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    supabase_client.update_session(session_id, {
        'field_to_edit': field_name,
        'status': 'awaiting_edit'
    })
    
    current_value = session['parsed_data'].get(field_name, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    telegram = TelegramService()
    telegram.send_message(
        chat_id, 
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{field_name}</b>:\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}</code>\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
    )

def handle_edit_done(chat_id, session_id):
    session = supabase_client.get_session(session_id)
    if not session:
        TelegramService().send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    corrected_data = format_final_data(session['parsed_data'])
    
    telegram = TelegramService()
    telegram.send_message(
        chat_id, 
        f"‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n{corrected_data}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", 
        telegram.create_ok_button(session_id)
    )

def handle_edit_ok(chat_id, session_id, username):
    session = supabase_client.get_session(session_id)
    if not session:
        TelegramService().send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    bitrix_service = BitrixService()
    
    item_id = bitrix_service.send_data(
        session['parsed_data'], 
        chat_id, 
        username
    )
    
    bitrix_id = bitrix_service.extract_bitrix_id(item_id)
    
    final_data = format_final_data(session['parsed_data'])
    
    telegram = TelegramService()
    if bitrix_id:
        message = f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, ID –∑–∞—è–≤–∫–∏: {bitrix_id}\n\n{final_data}"
    else:
        message = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24\n\n{final_data}"
    
    telegram.send_message(chat_id, message)
    logging.info(f"üì§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {session['parsed_data']}")
    
    supabase_client.delete_session(session_id)

def format_final_data(parsed_data):
    return (
        f"–£—á–∞—Å—Ç–æ–∫: <b>{parsed_data['–£—á–∞—Å—Ç–æ–∫']}</b>\n"
        f"–ò–∑–¥–µ–ª–∏–µ: <b>{parsed_data['–ò–∑–¥–µ–ª–∏–µ']}</b>\n"
        f"–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞: <b>{parsed_data['–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞']}</b>\n"
        f"–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è: <b>{parsed_data['–ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è']}</b>"
    )
