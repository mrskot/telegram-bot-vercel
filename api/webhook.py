from http.server import BaseHTTPRequestHandler
import json
import os
import logging
import uuid
import threading
from lib.telegram import TelegramService
from lib.ocr import OCRService
from lib.deepseek import DeepSeekService
from lib.callback_handler import handle_callback_query
from lib.supabase_client import supabase_client
from utils.formatters import parse_extracted_data, format_data_for_display

logging.basicConfig(level=logging.INFO)

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Health check –∏ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.path == '/health' or self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "healthy", 
                "service": "telegram-bot",
                "platform": "vercel+supabase",
                "version": "2.0.0"
            }
            self.wfile.write(json.dumps(response).encode())
            return
        
        self.send_response(404)
        self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            update = json.loads(post_data)
            
            logging.info(f"üì® Received update: {update.keys()}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
            if 'callback_query' in update:
                handle_callback_query(update['callback_query'])
                self._send_response(200, {"status": "callback_processed"})
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π)
                if 'text' in message:
                    self._handle_text_message(chat_id, message['text'])
                    self._send_response(200, {"status": "text_processed"})
                    return
                
                # –§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if 'photo' in message:
                    self._handle_photo_async(chat_id, message['photo'])
                    self._send_response(200, {"status": "photo_processing"})
                    return
            
            self._send_response(200, {"status": "ok"})
            
        except Exception as e:
            logging.error(f"‚ùå Error in webhook: {e}")
            self._send_response(500, {"error": str(e)})
    
    def _send_response(self, code, data):
        """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        self.send_response(code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(data).encode())
    
    def _handle_text_message(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sessions = supabase_client.supabase.table('sessions')\
                .select('*')\
                .eq('chat_id', chat_id)\
                .eq('status', 'awaiting_edit')\
                .execute()
            
            if sessions.data:
                session = sessions.data[0]
                field_to_edit = session.get('field_to_edit')
                
                if field_to_edit:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
                    parsed_data = session['parsed_data']
                    parsed_data[field_to_edit] = text
                    
                    supabase_client.update_session(session['id'], {
                        'parsed_data': parsed_data,
                        'status': 'editing',
                        'field_to_edit': None
                    })
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    telegram = TelegramService()
                    telegram.send_edit_view(chat_id, session['id'], parsed_data)
                    
        except Exception as e:
            logging.error(f"‚ùå Error handling text message: {e}")
    
    def _handle_photo_async(self, chat_id, photos):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
        thread = threading.Thread(
            target=self._process_photo, 
            args=(chat_id, photos)
        )
        thread.start()
    
    def _process_photo(self, chat_id, photos):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            telegram = TelegramService()
            ocr = OCRService()
            deepseek = DeepSeekService()
            
            telegram.send_message(chat_id, "üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ Supabase
            session = supabase_client.create_session(chat_id)
            if not session:
                telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                return
            
            session_id = session['id']
            
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            photo = photos[-2] if len(photos) >= 2 else photos[-1]
            file_id = photo['file_id']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase Storage
            file_url = telegram.download_and_store_file(file_id, session_id)
            if not file_url:
                telegram.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
                return
            
            telegram.send_message(chat_id, "üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
            extracted_text = ocr.extract_text_from_url(file_url, session_id)
            if not extracted_text:
                telegram.send_message(
                    chat_id, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
                )
                return
            
            telegram.send_message(chat_id, "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek
            analysis_result = deepseek.analyze_text(extracted_text)
            
            # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            parsed_data = parse_extracted_data(analysis_result)
            
            supabase_client.update_session(session_id, {
                'extracted_data': analysis_result,
                'parsed_data': parsed_data,
                'status': 'pending_verification'
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_data = format_data_for_display(parsed_data)
            telegram.send_message(
                chat_id,
                f"{formatted_data}\n\n<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>",
                telegram.create_verification_buttons(session_id)
            )
            
            logging.info(f"‚úÖ Photo processed for chat {chat_id}, session {session_id}")
            
        except Exception as e:
            logging.error(f"‚ùå Error processing photo: {e}")
            telegram = TelegramService()
            telegram.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
